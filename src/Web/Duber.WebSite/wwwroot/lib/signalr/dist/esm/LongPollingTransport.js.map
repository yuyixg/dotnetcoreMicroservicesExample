{"version":3,"file":"LongPollingTransport.js","sourceRoot":"","sources":["../../src/LongPollingTransport.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { DataReceived, TransportClosed } from \"./Common\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\nconst SHUTDOWN_TIMEOUT = 5 * 1000;\r\n\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n\r\n    private url: string;\r\n    private pollXhr: XMLHttpRequest;\r\n    private pollAbort: AbortController;\r\n    private shutdownTimeout: number;\r\n    private running: boolean;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n    }\r\n\r\n    public connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting\");\r\n\r\n        if (transferFormat === TransferFormat.Binary && (typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            // This will work if we fix: https://github.com/aspnet/SignalR/issues/742\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        this.poll(this.url, transferFormat);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private async poll(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.running = true;\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers: {},\r\n            timeout: 90000,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        let closeError: Error;\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.accessTokenFactory();\r\n                if (token) {\r\n                    // tslint:disable-next-line:no-string-literal\r\n                    pollOptions.headers[\"Authorization\"] = `Bearer ${token}`;\r\n                }\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server\");\r\n\r\n                        // If we were on a timeout waiting for shutdown, unregister it.\r\n                        clearTimeout(this.shutdownTimeout);\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\r\n\r\n                        // Unexpected status code\r\n                        closeError = new HttpError(response.statusText, response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after we were stopped by DELETE\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            // Fire our onclosed event\r\n            if (this.onclose) {\r\n                this.logger.log(LogLevel.Trace, `(LongPolling transport) Firing onclose event. Error: ${closeError || \"<undefined>\"}`);\r\n                this.onclose(closeError);\r\n            }\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Transport finished.\");\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        // Send a DELETE request to stop the poll\r\n        try {\r\n            this.running = false;\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const deleteOptions: HttpRequest = {};\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                // tslint:disable-next-line:no-string-literal\r\n                deleteOptions.headers = {\r\n                    [\"Authorization\"]: `Bearer ${token}`,\r\n                };\r\n            }\r\n            const response = await this.httpClient.delete(this.url, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\r\n        } finally {\r\n            // Abort the poll after 5 seconds if the server doesn't stop it.\r\n            if (!this.pollAbort.aborted) {\r\n                this.shutdownTimeout = setTimeout(SHUTDOWN_TIMEOUT, () => {\r\n                    this.logger.log(LogLevel.Warning, \"(LongPolling transport) server did not terminate within 5 seconds after DELETE request, cancelling poll.\");\r\n                    this.pollAbort.abort();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public onreceive: DataReceived;\r\n    public onclose: TransportClosed;\r\n}\r\n"]}