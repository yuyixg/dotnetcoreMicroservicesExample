{"version":3,"sources":["../../node_modules/es6-promise/dist/lib/es6-promise/utils.js","../../node_modules/es6-promise/dist/lib/es6-promise/asap.js","../../node_modules/es6-promise/dist/lib/es6-promise/then.js","../../node_modules/es6-promise/dist/lib/es6-promise/promise/resolve.js","../../node_modules/es6-promise/dist/lib/es6-promise/-internal.js","../../node_modules/es6-promise/dist/lib/es6-promise/enumerator.js","../../node_modules/es6-promise/dist/lib/es6-promise/promise/all.js","../../node_modules/es6-promise/dist/lib/es6-promise/promise/race.js","../../node_modules/es6-promise/dist/lib/es6-promise/promise/reject.js","../../node_modules/es6-promise/dist/lib/es6-promise/promise.js","../../node_modules/es6-promise/dist/lib/es6-promise/polyfill.js","../../node_modules/es6-promise/dist/lib/es6-promise.js","../../node_modules/es6-promise/dist/lib/es6-promise.auto.js","../../src/Errors.ts","../../src/ILogger.ts","../../src/HttpClient.ts","../../src/ITransport.ts","../../src/Loggers.ts","../../src/AbortController.ts","../../src/Utils.ts","../../src/LongPollingTransport.ts","../../src/ServerSentEventsTransport.ts","../../src/WebSocketTransport.ts","../../src/HttpConnection.ts","../../src/TextMessageFormat.ts","../../src/HandshakeProtocol.ts","../../src/JsonHubProtocol.ts","../../src/Observable.ts","../../src/HubConnection.ts","../../src/index.ts","../../src/browser-index.ts"],"names":["objectOrFunction","x","type","isFunction","_isArray","Array","isArray","Object","prototype","toString","call","len","vertxNext","customSchedulerFn","asap","callback","arg","queue","flush","scheduleFlush","setScheduler","scheduleFn","setAsap","asapFn","browserWindow","window","undefined","browserGlobal","BrowserMutationObserver","MutationObserver","WebKitMutationObserver","isNode","self","process","isWorker","Uint8ClampedArray","importScripts","MessageChannel","useNextTick","nextTick","useVertxTimer","useSetTimeout","useMutationObserver","iterations","observer","node","document","createTextNode","observe","characterData","data","useMessageChannel","channel","port1","onmessage","port2","postMessage","globalSetTimeout","setTimeout","i","attemptVertx","r","require","vertx","runOnLoop","runOnContext","e","then","onFulfillment","onRejection","parent","this","child","constructor","noop","PROMISE_ID","makePromise","_state","arguments","invokeCallback","_result","subscribe","resolve","object","Constructor","promise","_resolve","Math","random","substring","PENDING","FULFILLED","REJECTED","GET_THEN_ERROR","ErrorObject","selfFulfillment","TypeError","cannotReturnOwn","getThen","error","tryThen","value","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","sealed","fulfill","reason","reject","_label","handleOwnThenable","handleMaybeThenable","maybeThenable","originalThen","originalResolve","publishRejection","_onerror","publish","_subscribers","length","subscribers","settled","detail","TRY_CATCH_ERROR","tryCatch","hasCallback","succeeded","failed","initializePromise","resolver","resolvePromise","rejectPromise","id","nextId","validationError","Error","Enumerator","input","_instanceConstructor","_remaining","_enumerate","_eachEntry","entry","c","_then","_settledAt","Promise","_willSettleAt","state","enumerator","all","entries","race","_","_reject","needsResolver","needsNew","catch","_catch","finally","_finally","Promise$2","Resolve","Reject","_setScheduler","_setAsap","_asap","polyfill","local","global","Function","P","promiseToString","cast","HttpError","_super","__extends","errorMessage","statusCode","_this","trueProto","_newTarget","__proto__","exports","TimeoutError","LogLevel","HttpResponse","statusText","content","HttpClient","get","url","options","send","__assign","method","post","delete","DefaultHttpClient","logger","request","xhr","XMLHttpRequest","open","withCredentials","setRequestHeader","headers","keys","forEach","header","responseType","abortSignal","onabort","abort","timeout","onreadystatechange","readyState","status","response","responseText","Errors_1","onerror","log","ILogger_1","Warning","ontimeout","HttpTransportType","TransferFormat","NullLogger","logLevel","message","ConsoleLogger","minimumLogLevel","console","warn","Information","info","LoggerFactory","createLogger","logging","AbortController","isAborted","defineProperty","Arg","isRequired","val","name","isIn","values","getDataDetail","includeContent","ArrayBuffer","byteLength","formatArrayBuffer","view","Uint8Array","str","num","pad","substr","sendMessage","transportName","httpClient","accessTokenFactory","logMessageContent","token","_b","sent","_a","Trace","SHUTDOWN_TIMEOUT","LongPollingTransport","pollAbort","AbortController_1","connect","transferFormat","Utils_1","ITransport_1","Binary","poll","running","pollOptions","signal","pollUrl","Date","now","clearTimeout","shutdownTimeout","closeError","onreceive","e_1","onclose","stop","deleteOptions","aborted","ServerSentEventsTransport","indexOf","encodeURIComponent","opened","Text","eventSource","EventSource","close","onopen","WebSocketTransport","replace","webSocket","WebSocket","binaryType","event","wasClean","code","OPEN","HttpConnection","features","Loggers_1","baseUrl","resolveUrl","HttpClient_1","connectionState","start","startPromise","startInternal","transport","WebSockets","constructTransport","getNegotiationResponse","negotiateResponse","createTransport","LongPollingTransport_1","inherentKeepAlive","stopConnection","changeState","negotiateUrl","resolveNegotiateUrl","JSON","parse","e_2","updateConnectionId","connectionId","requestedTransport","requestedTransferFormat","isITransport","transports","availableTransports","transports_1","_i","endpoint","resolveTransport","ex_1","WebSocketTransport_1","ServerSentEvents","ServerSentEventsTransport_1","LongPolling","transferFormats","map","s","from","to","stopError","lastIndexOf","aTag","createElement","href","index","TextMessageFormat","write","output","RecordSeparator","messages","split","pop","RecordSeparatorCode","String","fromCharCode","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","TextMessageFormat_1","stringify","parseHandshakeResponse","responseMessage","messageData","remainingData","binaryData","separatorIndex","responseLength","apply","slice","buffer","textData","JSON_HUB_PROTOCOL_NAME","JsonHubProtocol","version","parseMessages","hubMessages","messages_1","parsedMessage","isInvocationMessage","isStreamItemMessage","isCompletionMessage","push","writeMessage","assertNotEmptyString","target","invocationId","item","result","Subscription","subject","dispose","observers","splice","cancelCallback","Subject","next","err","complete","JsonHubProtocol_1","DEFAULT_TIMEOUT_IN_MS","HubConnection","urlOrConnection","timeoutInMilliseconds","protocol","handshakeProtocol","HandshakeProtocol_1","connection","HttpConnection_1","processIncomingData","connectionClosed","callbacks","methods","closedCallbacks","cleanupTimeout","receivedHandshakeResponse","processHandshakeResponse","invokeClientMethod","configureTimeout","timeoutHandle","serverTimeout","invocationMessage","toLowerCase","m","key","stream","methodName","args","invocationDescriptor","createStreamInvocation","Observable_1","cancelInvocation","createCancelInvocation","cancelMessage","invocationEvent","createInvocation","invoke","p","completionMessage","on","newMethod","off","handlers","removeIdx","nonblocking","__export","Errors","HubConnection_1","IHubProtocol","ILogger","Loggers","ITransport","Observable","writable","cjs"],"mappings":"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","sourcesContent":["export function objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nexport function isFunction(x) {\n  return typeof x === 'function';\n}\n\nexport function isMaybeThenable(x) {\n  return x !== null && typeof x === 'object';\n}\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nexport var isArray = _isArray;","var len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nexport var asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nexport function setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nexport function setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}","import { invokeCallback, subscribe, FULFILLED, REJECTED, noop, makePromise, PROMISE_ID } from './-internal';\n\nimport { asap } from './asap';\n\nexport default function then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}","import { noop, resolve as _resolve } from '../-internal';\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nexport default function resolve(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  _resolve(promise, object);\n  return promise;\n}","import { objectOrFunction, isFunction } from './utils';\n\nimport { asap } from './asap';\n\nimport originalThen from './then';\nimport originalResolve from './promise/resolve';\n\nexport var PROMISE_ID = Math.random().toString(36).substring(16);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then) {\n  if (maybeThenable.constructor === promise.constructor && then === originalThen && maybeThenable.constructor.resolve === originalResolve) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n      GET_THEN_ERROR.error = null;\n    } else if (then === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then)) {\n      handleForeignThenable(promise, maybeThenable, then);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = void 0,\n      failed = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (failed) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nexport { nextId, makePromise, getThen, noop, resolve, reject, fulfill, subscribe, publish, publishRejection, initializePromise, invokeCallback, FULFILLED, REJECTED, PENDING, handleMaybeThenable };","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { isArray, isMaybeThenable } from './utils';\n\nimport { noop, reject, fulfill, subscribe, FULFILLED, REJECTED, PENDING, getThen, handleMaybeThenable } from './-internal';\n\nimport then from './then';\nimport Promise from './promise';\nimport originalResolve from './promise/resolve';\nimport originalThen from './then';\nimport { makePromise, PROMISE_ID } from './-internal';\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n};\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve = c.resolve;\n\n\n    if (resolve === originalResolve) {\n      var _then = getThen(entry);\n\n      if (_then === originalThen && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, _then);\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve) {\n          return resolve(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\nexport default Enumerator;","import Enumerator from '../enumerator';\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nexport default function all(entries) {\n  return new Enumerator(this, entries).promise;\n}","import { isArray } from \"../utils\";\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nexport default function race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}","import { noop, reject as _reject } from '../-internal';\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nexport default function reject(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  _reject(promise, reason);\n  return promise;\n}","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { isFunction } from './utils';\n\nimport { noop, nextId, PROMISE_ID, initializePromise } from './-internal';\n\nimport { asap, setAsap, setScheduler } from './asap';\n\nimport all from './promise/all';\nimport race from './promise/race';\nimport Resolve from './promise/resolve';\nimport Reject from './promise/reject';\nimport then from './then';\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    });\n  };\n\n  return Promise;\n}();\n\nPromise.prototype.then = then;\nexport default Promise;\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = Resolve;\nPromise.reject = Reject;\nPromise._setScheduler = setScheduler;\nPromise._setAsap = setAsap;\nPromise._asap = asap;","/*global self*/\nimport Promise from './promise';\n\nexport default function polyfill() {\n    var local = void 0;\n\n    if (typeof global !== 'undefined') {\n        local = global;\n    } else if (typeof self !== 'undefined') {\n        local = self;\n    } else {\n        try {\n            local = Function('return this')();\n        } catch (e) {\n            throw new Error('polyfill failed because global object is unavailable in this environment');\n        }\n    }\n\n    var P = local.Promise;\n\n    if (P) {\n        var promiseToString = null;\n        try {\n            promiseToString = Object.prototype.toString.call(P.resolve());\n        } catch (e) {\n            // silently ignored\n        }\n\n        if (promiseToString === '[object Promise]' && !P.cast) {\n            return;\n        }\n    }\n\n    local.Promise = Promise;\n}","import Promise from './es6-promise/promise';\nimport polyfill from './es6-promise/polyfill';\n\n// Strange compat..\nPromise.polyfill = polyfill;\nPromise.Promise = Promise;\nexport default Promise;","import Promise from './es6-promise';\nPromise.polyfill();\nexport default Promise;","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nexport class HttpError extends Error {\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n    public statusCode: number;\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\nexport class TimeoutError extends Error {\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nexport enum LogLevel {\r\n    Trace = 0,\r\n    Information,\r\n    Warning,\r\n    Error,\r\n    None,\r\n}\r\n\r\nexport interface ILogger {\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport interface HttpRequest {\r\n    method?: string;\r\n    url?: string;\r\n    content?: string | ArrayBuffer;\r\n    headers?: { [key: string]: string };\r\n    responseType?: XMLHttpRequestResponseType;\r\n    abortSignal?: AbortSignal;\r\n    timeout?: number;\r\n}\r\n\r\nexport class HttpResponse {\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText: string,\r\n        public readonly content: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\nexport abstract class HttpClient {\r\n    public get(url: string): Promise<HttpResponse>;\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    public post(url: string): Promise<HttpResponse>;\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    public delete(url: string): Promise<HttpResponse>;\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n}\r\n\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.withCredentials = true;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n\r\n            if (request.headers) {\r\n                Object.keys(request.headers)\r\n                    .forEach((header) => xhr.setRequestHeader(header, request.headers[header]));\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onreadystatechange = () => {\r\n                if (xhr.readyState === 4) {\r\n                    if (request.abortSignal) {\r\n                        request.abortSignal.onabort = null;\r\n                    }\r\n\r\n                    // Some browsers report xhr.status == 0 when the\r\n                    // response has been cut off or there's been a TCP FIN.\r\n                    // Treat it like a 200 with no response.\r\n                    if (xhr.status === 0) {\r\n                        resolve(new HttpResponse(200, null, null));\r\n                    } else if (xhr.status >= 200 && xhr.status < 300) {\r\n                        resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                    } else {\r\n                        reject(new HttpError(xhr.statusText, xhr.status));\r\n                    }\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n","import { DataReceived, TransportClosed } from \"./Common\";\r\nimport { IConnection } from \"./IConnection\";\r\n\r\n// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nexport enum HttpTransportType {\r\n    WebSockets,\r\n    ServerSentEvents,\r\n    LongPolling,\r\n}\r\n\r\nexport enum TransferFormat {\r\n    Text = 1,\r\n    Binary,\r\n}\r\n\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: DataReceived;\r\n    onclose: TransportClosed;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class NullLogger implements ILogger {\r\n    public log(logLevel: LogLevel, message: string): void {\r\n    }\r\n}\r\n\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly minimumLogLevel: LogLevel;\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this.minimumLogLevel = minimumLogLevel;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this.minimumLogLevel) {\r\n            switch (logLevel) {\r\n                case LogLevel.Error:\r\n                    console.error(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    console.warn(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    console.info(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                default:\r\n                    console.log(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class LoggerFactory {\r\n    public static createLogger(logging?: ILogger | LogLevel) {\r\n        if (logging === undefined) {\r\n            return new ConsoleLogger(LogLevel.Information);\r\n        }\r\n\r\n        if (logging === null) {\r\n            return new NullLogger();\r\n        }\r\n\r\n        if ((logging as ILogger).log) {\r\n            return logging as ILogger;\r\n        }\r\n\r\n        return new ConsoleLogger(logging as LogLevel);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\nexport class AbortController implements AbortSignal {\r\n    private isAborted: boolean = false;\r\n    public onabort: () => void;\r\n\r\n    public abort() {\r\n        if (!this.isAborted) {\r\n            this.isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this.isAborted;\r\n    }\r\n}\r\n\r\nexport interface AbortSignal {\r\n    aborted: boolean;\r\n    onabort: () => void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let length: string = null;\r\n    if (data instanceof ArrayBuffer) {\r\n        length = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            length += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        length = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            length += `. Content: '${data}'.`;\r\n        }\r\n    }\r\n    return length;\r\n}\r\n\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: () => string | Promise<string>, content: string | ArrayBuffer, logMessageContent: boolean): Promise<void> {\r\n    let headers;\r\n    const token = await accessTokenFactory();\r\n    if (token) {\r\n        headers = {\r\n            [\"Authorization\"]: `Bearer ${token}`,\r\n        };\r\n    }\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, logMessageContent)}.`);\r\n\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { DataReceived, TransportClosed } from \"./Common\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\nconst SHUTDOWN_TIMEOUT = 5 * 1000;\r\n\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n\r\n    private url: string;\r\n    private pollXhr: XMLHttpRequest;\r\n    private pollAbort: AbortController;\r\n    private shutdownTimeout: number;\r\n    private running: boolean;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n    }\r\n\r\n    public connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting\");\r\n\r\n        if (transferFormat === TransferFormat.Binary && (typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            // This will work if we fix: https://github.com/aspnet/SignalR/issues/742\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        this.poll(this.url, transferFormat);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private async poll(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.running = true;\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers: {},\r\n            timeout: 90000,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        let closeError: Error;\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.accessTokenFactory();\r\n                if (token) {\r\n                    // tslint:disable-next-line:no-string-literal\r\n                    pollOptions.headers[\"Authorization\"] = `Bearer ${token}`;\r\n                }\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server\");\r\n\r\n                        // If we were on a timeout waiting for shutdown, unregister it.\r\n                        clearTimeout(this.shutdownTimeout);\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\r\n\r\n                        // Unexpected status code\r\n                        closeError = new HttpError(response.statusText, response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after we were stopped by DELETE\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            // Fire our onclosed event\r\n            if (this.onclose) {\r\n                this.logger.log(LogLevel.Trace, `(LongPolling transport) Firing onclose event. Error: ${closeError || \"<undefined>\"}`);\r\n                this.onclose(closeError);\r\n            }\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Transport finished.\");\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        // Send a DELETE request to stop the poll\r\n        try {\r\n            this.running = false;\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const deleteOptions: HttpRequest = {};\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                // tslint:disable-next-line:no-string-literal\r\n                deleteOptions.headers = {\r\n                    [\"Authorization\"]: `Bearer ${token}`,\r\n                };\r\n            }\r\n            const response = await this.httpClient.delete(this.url, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\r\n        } finally {\r\n            // Abort the poll after 5 seconds if the server doesn't stop it.\r\n            if (!this.pollAbort.aborted) {\r\n                this.shutdownTimeout = setTimeout(SHUTDOWN_TIMEOUT, () => {\r\n                    this.logger.log(LogLevel.Warning, \"(LongPolling transport) server did not terminate within 5 seconds after DELETE request, cancelling poll.\");\r\n                    this.pollAbort.abort();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public onreceive: DataReceived;\r\n    public onclose: TransportClosed;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DataReceived, TransportClosed } from \"./Common\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private eventSource: EventSource;\r\n    private url: string;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n        this.logMessageContent = logMessageContent;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        if (typeof (EventSource) === \"undefined\") {\r\n            throw new Error(\"'EventSource' is not supported in your environment.\");\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting\");\r\n\r\n        const token = await this.accessTokenFactory();\r\n        if (token) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n        }\r\n\r\n        this.url = url;\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n            }\r\n\r\n            const eventSource = new EventSource(url, { withCredentials: true });\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            if (this.onclose) {\r\n                                this.onclose(error);\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: any) => {\r\n                    const error = new Error(e.message || \"Error occurred\");\r\n                    if (opened) {\r\n                        this.close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                return Promise.reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"SSE\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(e?: Error) {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = null;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onreceive: DataReceived;\r\n    public onclose: TransportClosed;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DataReceived, TransportClosed } from \"./Common\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail } from \"./Utils\";\r\n\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logMessageContent: boolean;\r\n    private webSocket: WebSocket;\r\n\r\n    constructor(accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logMessageContent = logMessageContent;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        if (typeof (WebSocket) === \"undefined\") {\r\n            throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting\");\r\n\r\n        const token = await this.accessTokenFactory();\r\n        if (token) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            const webSocket = new WebSocket(url);\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}`);\r\n                this.webSocket = webSocket;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: ErrorEvent) => {\r\n                reject(event.error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    this.onreceive(message.data);\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // webSocket will be null if the transport did not start successfully\r\n                this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n                if (this.onclose) {\r\n                    if (event.wasClean === false || event.code !== 1000) {\r\n                        this.onclose(new Error(`Websocket closed with status code: ${event.code} (${event.reason})`));\r\n                    } else {\r\n                        this.onclose();\r\n                    }\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === WebSocket.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            this.webSocket.close();\r\n            this.webSocket = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onreceive: DataReceived;\r\n    public onclose: TransportClosed;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ConnectionClosed, DataReceived } from \"./Common\";\r\nimport { DefaultHttpClient, HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LoggerFactory } from \"./Loggers\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\nexport interface IHttpConnectionOptions {\r\n    httpClient?: HttpClient;\r\n    transport?: HttpTransportType | ITransport;\r\n    logger?: ILogger | LogLevel;\r\n    accessTokenFactory?: () => string | Promise<string>;\r\n    logMessageContent?: boolean;\r\n}\r\n\r\nconst enum ConnectionState {\r\n    Connecting,\r\n    Connected,\r\n    Disconnected,\r\n}\r\n\r\ninterface INegotiateResponse {\r\n    connectionId: string;\r\n    availableTransports: IAvailableTransport[];\r\n}\r\n\r\ninterface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: Array<keyof typeof TransferFormat>;\r\n}\r\n\r\nexport class HttpConnection implements IConnection {\r\n    private connectionState: ConnectionState;\r\n    private baseUrl: string;\r\n    private url: string;\r\n    private readonly httpClient: HttpClient;\r\n    private readonly logger: ILogger;\r\n    private readonly options: IHttpConnectionOptions;\r\n    private transport: ITransport;\r\n    private connectionId: string;\r\n    private startPromise: Promise<void>;\r\n    private stopError?: Error;\r\n\r\n    public readonly features: any = {};\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.logger = LoggerFactory.createLogger(options.logger);\r\n        this.baseUrl = this.resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.accessTokenFactory = options.accessTokenFactory || (() => null);\r\n        options.logMessageContent = options.logMessageContent || false;\r\n\r\n        this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.options = options;\r\n    }\r\n\r\n    public start(transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this.connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a connection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.startPromise = this.startInternal(transferFormat);\r\n        return this.startPromise;\r\n    }\r\n\r\n    private async startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        try {\r\n            if (this.options.transport === HttpTransportType.WebSockets) {\r\n                // No need to add a connection ID in this case\r\n                this.url = this.baseUrl;\r\n                this.transport = this.constructTransport(HttpTransportType.WebSockets);\r\n                // We should just call connect directly in this case.\r\n                // No fallback or negotiate in this case.\r\n                await this.transport.connect(this.url, transferFormat);\r\n            } else {\r\n                const token = await this.options.accessTokenFactory();\r\n                let headers;\r\n                if (token) {\r\n                    headers = {\r\n                        [\"Authorization\"]: `Bearer ${token}`,\r\n                    };\r\n                }\r\n\r\n                const negotiateResponse = await this.getNegotiationResponse(headers);\r\n                // the user tries to stop the the connection when it is being started\r\n                if (this.connectionState === ConnectionState.Disconnected) {\r\n                    return;\r\n                }\r\n                await this.createTransport(this.options.transport, negotiateResponse, transferFormat, headers);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            this.transport.onreceive = this.onreceive;\r\n            this.transport.onclose = (e) => this.stopConnection(e);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.transport = null;\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private async getNegotiationResponse(headers: any): Promise<INegotiateResponse> {\r\n        const negotiateUrl = this.resolveNegotiateUrl(this.baseUrl);\r\n        this.logger.log(LogLevel.Trace, `Sending negotiation request: ${negotiateUrl}`);\r\n        try {\r\n            const response = await this.httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers,\r\n            });\r\n            return JSON.parse(response.content as string);\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private updateConnectionId(negotiateResponse: INegotiateResponse) {\r\n        this.connectionId = negotiateResponse.connectionId;\r\n        this.url = this.baseUrl + (this.baseUrl.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${this.connectionId}`;\r\n    }\r\n\r\n    private async createTransport(requestedTransport: HttpTransportType | ITransport, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat, headers: any): Promise<void> {\r\n        this.updateConnectionId(negotiateResponse);\r\n        if (this.isITransport(requestedTransport)) {\r\n            this.logger.log(LogLevel.Trace, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this.transport.connect(this.url, requestedTransferFormat);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n            return;\r\n        }\r\n\r\n        const transports = negotiateResponse.availableTransports;\r\n        for (const endpoint of transports) {\r\n            this.connectionState = ConnectionState.Connecting;\r\n            const transport = this.resolveTransport(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (typeof transport === \"number\") {\r\n                this.transport = this.constructTransport(transport);\r\n                if (negotiateResponse.connectionId === null) {\r\n                    negotiateResponse = await this.getNegotiationResponse(headers);\r\n                    this.updateConnectionId(negotiateResponse);\r\n                }\r\n                try {\r\n                    await this.transport.connect(this.url, requestedTransferFormat);\r\n                    this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n                    return;\r\n                } catch (ex) {\r\n                    this.logger.log(LogLevel.Error, `Failed to start the transport '${HttpTransportType[transport]}': ${ex}`);\r\n                    this.connectionState = ConnectionState.Disconnected;\r\n                    negotiateResponse.connectionId = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new Error(\"Unable to initialize any of the available transports.\");\r\n    }\r\n\r\n    private constructTransport(transport: HttpTransportType) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                return new WebSocketTransport(this.options.accessTokenFactory, this.logger, this.options.logMessageContent);\r\n            case HttpTransportType.ServerSentEvents:\r\n                return new ServerSentEventsTransport(this.httpClient, this.options.accessTokenFactory, this.logger, this.options.logMessageContent);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this.httpClient, this.options.accessTokenFactory, this.logger, this.options.logMessageContent);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private resolveTransport(endpoint: IAvailableTransport, requestedTransport: HttpTransportType, requestedTransferFormat: TransferFormat): HttpTransportType | null {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this.logger.log(LogLevel.Trace, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n            if (!requestedTransport || transport === requestedTransport) {\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && typeof WebSocket === \"undefined\") ||\r\n                        (transport === HttpTransportType.ServerSentEvents && typeof EventSource === \"undefined\")) {\r\n                        this.logger.log(LogLevel.Trace, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                    } else {\r\n                        this.logger.log(LogLevel.Trace, `Selecting transport '${HttpTransportType[transport]}'`);\r\n                        return transport;\r\n                    }\r\n                } else {\r\n                    this.logger.log(LogLevel.Trace, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                }\r\n            } else {\r\n                this.logger.log(LogLevel.Trace, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isITransport(transport: any): transport is ITransport {\r\n        return typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private changeState(from: ConnectionState, to: ConnectionState): boolean {\r\n        if (this.connectionState === from) {\r\n            this.connectionState = to;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            throw new Error(\"Cannot send data if the connection is not in the 'Connected' State.\");\r\n        }\r\n\r\n        return this.transport.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        try {\r\n            await this.startPromise;\r\n        } catch (e) {\r\n            // this exception is returned to the user as a rejected Promise from the start method\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        if (this.transport) {\r\n            this.stopError = error;\r\n            await this.transport.stop();\r\n            this.transport = null;\r\n        }\r\n    }\r\n\r\n    private async stopConnection(error?: Error): Promise<void> {\r\n        this.transport = null;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this.stopError || error;\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this.onclose) {\r\n            this.onclose(error);\r\n        }\r\n    }\r\n\r\n    private resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (typeof window === \"undefined\" || !window || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative  path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n        return negotiateUrl;\r\n    }\r\n\r\n    public onreceive: DataReceived;\r\n    public onclose: ConnectionClosed;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","import { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n}\r\n\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (data instanceof ArrayBuffer) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        responseMessage = JSON.parse(messages[0]);\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { CloseMessage, CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, PingMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nexport const JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    public readonly version: number = 1;\r\n\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = new NullLogger();\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this.isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this.isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this.isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private isInvocationMessage(message: InvocationMessage): void {\r\n        this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private isStreamItemMessage(message: StreamItemMessage): void {\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// TODO: Seamless RxJs integration\r\n// From RxJs: https://github.com/ReactiveX/rxjs/blob/master/src/Observer.ts\r\nexport interface Observer<T> {\r\n    closed?: boolean;\r\n    next: (value: T) => void;\r\n    error?: (err: any) => void;\r\n    complete?: () => void;\r\n}\r\n\r\nexport class Subscription<T> {\r\n    private subject: Subject<T>;\r\n    private observer: Observer<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: Observer<T>) {\r\n        this.subject = subject;\r\n        this.observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this.subject.observers.indexOf(this.observer);\r\n        if (index > -1) {\r\n            this.subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this.subject.observers.length === 0) {\r\n            this.subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\nexport interface Observable<T> {\r\n    subscribe(observer: Observer<T>): Subscription<T>;\r\n}\r\n\r\nexport class Subject<T> implements Observable<T> {\r\n    public observers: Array<Observer<T>>;\r\n    public cancelCallback: () => Promise<void>;\r\n\r\n    constructor(cancelCallback: () => Promise<void>) {\r\n        this.observers = [];\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: Observer<T>): Subscription<T> {\r\n        this.observers.push(observer);\r\n        return new Subscription(this, observer);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ConnectionClosed } from \"./Common\";\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { HttpConnection, IHttpConnectionOptions } from \"./HttpConnection\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { ConsoleLogger, LoggerFactory, NullLogger } from \"./Loggers\";\r\nimport { Observable, Subject } from \"./Observable\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nexport { JsonHubProtocol };\r\n\r\nexport interface IHubConnectionOptions extends IHttpConnectionOptions {\r\n    protocol?: IHubProtocol;\r\n    timeoutInMilliseconds?: number;\r\n}\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\n\r\nexport class HubConnection {\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private protocol: IHubProtocol;\r\n    private handshakeProtocol: HandshakeProtocol;\r\n    private callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage, error?: Error) => void };\r\n    private methods: { [name: string]: Array<(...args: any[]) => void> };\r\n    private id: number;\r\n    private closedCallbacks: ConnectionClosed[];\r\n    private timeoutHandle: NodeJS.Timer;\r\n    private timeoutInMilliseconds: number;\r\n    private receivedHandshakeResponse: boolean;\r\n\r\n    constructor(url: string, options?: IHubConnectionOptions);\r\n    constructor(connection: IConnection, options?: IHubConnectionOptions);\r\n    constructor(urlOrConnection: string | IConnection, options: IHubConnectionOptions = {}) {\r\n        options = options || {};\r\n\r\n        this.timeoutInMilliseconds = options.timeoutInMilliseconds || DEFAULT_TIMEOUT_IN_MS;\r\n\r\n        this.protocol = options.protocol || new JsonHubProtocol();\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n\r\n        if (typeof urlOrConnection === \"string\") {\r\n            this.connection = new HttpConnection(urlOrConnection, options);\r\n        } else {\r\n            this.connection = urlOrConnection;\r\n        }\r\n\r\n        this.logger = LoggerFactory.createLogger(options.logger);\r\n\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.id = 0;\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        this.cleanupTimeout();\r\n\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this.protocol.parseMessages(data, this.logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this.callbacks[message.invocationId];\r\n                        if (callback != null) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n                        this.connection.stop(message.error ? new Error(\"Server returned an error on close: \" + message.error) : null);\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, \"Invalid message type: \" + message.type);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.configureTimeout();\r\n    }\r\n\r\n    private processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this.handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.connection.stop(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n            this.connection.stop(new Error(message));\r\n        } else {\r\n            this.logger.log(LogLevel.Trace, \"Server handshake complete.\");\r\n        }\r\n\r\n        return remainingData;\r\n    }\r\n\r\n    private configureTimeout() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.timeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n                this.connection.stop(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        const callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(undefined, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\r\n            });\r\n\r\n        this.cleanupTimeout();\r\n\r\n        this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n    }\r\n\r\n    public async start(): Promise<void> {\r\n        const handshakeRequest: HandshakeRequestMessage = {\r\n            protocol: this.protocol.name,\r\n            version: this.protocol.version,\r\n        };\r\n\r\n        this.logger.log(LogLevel.Trace, \"Starting HubConnection.\");\r\n\r\n        this.receivedHandshakeResponse = false;\r\n\r\n        await this.connection.start(this.protocol.transferFormat);\r\n\r\n        this.logger.log(LogLevel.Trace, \"Sending handshake request.\");\r\n\r\n        await this.connection.send(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n        this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n        // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n        this.cleanupTimeout();\r\n        this.configureTimeout();\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Trace, \"Stopping HubConnection.\");\r\n\r\n        this.cleanupTimeout();\r\n        return this.connection.stop();\r\n    }\r\n\r\n    public stream<T>(methodName: string, ...args: any[]): Observable<T> {\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args);\r\n\r\n        const subject = new Subject<T>(() => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n            const cancelMessage: any = this.protocol.writeMessage(cancelInvocation);\r\n\r\n            delete this.callbacks[invocationDescriptor.invocationId];\r\n\r\n            return this.connection.send(cancelMessage);\r\n        });\r\n\r\n        this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n\r\n            if (invocationEvent.type === MessageType.Completion) {\r\n                if (invocationEvent.error) {\r\n                    subject.error(new Error(invocationEvent.error));\r\n                } else {\r\n                    subject.complete();\r\n                }\r\n            } else {\r\n                subject.next((invocationEvent.item) as T);\r\n            }\r\n        };\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        this.connection.send(message)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        return subject;\r\n    }\r\n\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, true);\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    public invoke(methodName: string, ...args: any[]): Promise<any> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: StreamItemMessage | CompletionMessage, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    const completionMessage = invocationEvent as CompletionMessage;\r\n                    if (completionMessage.error) {\r\n                        reject(new Error(completionMessage.error));\r\n                    } else {\r\n                        resolve(completionMessage.result);\r\n                    }\r\n                } else {\r\n                    reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                }\r\n            };\r\n\r\n            const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n            this.connection.send(message)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    delete this.callbacks[invocationDescriptor.invocationId];\r\n                });\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.methods[methodName].push(newMethod);\r\n    }\r\n\r\n    public off(methodName: string, method?: (...args: any[]) => void) {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this.methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    public onclose(callback: ConnectionClosed) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean): InvocationMessage {\r\n        if (nonblocking) {\r\n            return {\r\n                arguments: args,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        } else {\r\n            const id = this.id;\r\n            this.id++;\r\n\r\n            return {\r\n                arguments: args,\r\n                invocationId: id.toString(),\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[]): StreamInvocationMessage {\r\n        const id = this.id;\r\n        this.id++;\r\n\r\n        return {\r\n            arguments: args,\r\n            invocationId: id.toString(),\r\n            target: methodName,\r\n            type: MessageType.StreamInvocation,\r\n        };\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Everything that users need to access must be exported here. Including interfaces.\r\nexport * from \"./Common\";\r\nexport * from \"./Errors\";\r\nexport * from \"./HttpClient\";\r\nexport * from \"./HttpConnection\";\r\nexport * from \"./HubConnection\";\r\nexport * from \"./IConnection\";\r\nexport * from \"./IHubProtocol\";\r\nexport * from \"./ILogger\";\r\nexport * from \"./Loggers\";\r\nexport * from \"./ITransport\";\r\nexport * from \"./Observable\";\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This is where we add any polyfills we'll need for the browser. It is the entry module for browser-specific builds.\r\n\r\nimport \"es6-promise/dist/es6-promise.auto.js\";\r\n\r\n// Copy from Array.prototype into Uint8Array to polyfill on IE. It's OK because the implementations of indexOf and slice use properties\r\n// that exist on Uint8Array with the same name, and JavaScript is magic.\r\n// We make them 'writable' because the Buffer polyfill messes with it as well.\r\nif (!Uint8Array.prototype.indexOf) {\r\n    Object.defineProperty(Uint8Array.prototype, \"indexOf\", {\r\n        value: Array.prototype.indexOf,\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.slice) {\r\n    Object.defineProperty(Uint8Array.prototype, \"slice\", {\r\n        value: Array.prototype.slice,\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.forEach) {\r\n    Object.defineProperty(Uint8Array.prototype, \"forEach\", {\r\n        value: Array.prototype.forEach,\r\n        writable: true,\r\n    });\r\n}\r\n\r\nexport * from \"./index\";\r\n"]}